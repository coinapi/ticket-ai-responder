




Real-time trades stream using WebSocket with different languages | CoinAPI.io Documentation









Skip to main contentGitHubSearchGet a free API KeyWelcomeAuthenticationHow-to guidesAcquire exchange rates with different programming languagesBuilding a Cryptocurrency Portfolio Tracker Using React and CoinAPICreating a historical crypto price chart using CoinAPI and D3.jsFetching market data with KNIMEGet Historical OHLCV Data Using CoinAPIGet symbol funding rate metric data using CoinAPIImport API into PostmanImport data to Google Sheets/ExcelReal-time data visualization with javascriptReal-time trades stream using WebSocket with different languagesRetrieve and analyze crypto order book data using a cryptocurrency APIMarket Data APIEMS APIFAQChangelogHow-to guidesReal-time trades stream using WebSocket with different languagesOn this pageReal-time trades stream using WebSocket with different languagesIntroduction​This tutorial will guide you on how to subscribe to real-time cryptocurrency market data using CoinAPI. 
We will explore using the WebSocket protocol in Python, JavaScript, and Java to get live market data updates.Understanding WebSocket Protocol​CoinAPI provides real-time data through the WebSocket protocol. 
WebSocket allows for full-duplex communication channels over a single TCP connection,
making it an excellent choice for live data updates.
The key endpoint for real-time data is wss://ws.coinapi.io/v1/. 
To subscribe to a specific type of data, you need to send a subscription message after the connection is established.Python Example​In Python, we can use the websocket-client library to connect to CoinAPI's WebSocket API. 
If you don't have the websocket-client library installed, you can add it using pip:pip install websocket-clientHere's an example of real time trade data retrieval:import websocketimport json def on_message(ws, message):    print(message) def on_error(ws, error):    print(error) def on_close(ws):    print("### closed ###") def on_open(ws):    ws.send(json.dumps({        "type": "hello",        "apikey": "YOUR_API_KEY",        "subscribe_data_type": ["trade"],        "subscribe_filter_symbol_id": [ "BITSTAMP_SPOT_BTC_USD$", "BITFINEX_SPOT_BTC_USD$" ]    })) ws = websocket.WebSocketApp("wss://ws.coinapi.io/v1",                              on_message = on_message,                              on_error = on_error,                              on_close = on_close)ws.on_open = on_openws.run_forever()This script:Opens WebSocket connectionSubscribes to real time data for BTC/USD trading on Bitstamp and Bitfinex (you may replace with your desired cryptocurrency pair)Prints incoming real-time messagesNote: If subscribe_filter_symbol_id is ended with $ character then exact match is used instead of prefix match.You can check out more message examples and hello message parameters.JavaScript Example​Makes sure to install nodejs runtime environment before.
First, add package.json with node-fetch dependency:{  "type": "module",  "dependencies": {    "ws": "^8.13.0"  }}In JavaScript, you can use WebSocket API:import WebSocket from 'ws';const socket = new WebSocket('wss://ws.coinapi.io/v1/'); socket.onopen = function (event) {  socket.send(JSON.stringify({      "type": "hello",      "apikey": "YOUR_API_KEY",      "subscribe_data_type": ["trade"],      "subscribe_filter_symbol_id": [ "BITSTAMP_SPOT_BTC_USD$", "BITFINEX_SPOT_BTC_LTC$" ]  }));}; socket.onmessage = function (event) {  console.log(event.data);}; socket.onerror = function (error) {  console.log(`WebSocket error: ${error}`);};This script:Opens WebSocket connectionSubscribes to real time data for BTC/USD trading on Bitstamp and Bitfinex (you may replace with your desired cryptocurrency pair)Prints incoming real-time messagesInstall dependencies via npm install command. 
Execute your program in nodejs runtime environment with node your-script-name.js command.Note: If subscribe_filter_symbol_id is ended with $ character then exact match is used instead of prefix match.You can check out more message examples and hello message parameters.JavaScript in web browser​Here's example which works directly in web browser, just create index.html file, paste code and start in web browser:<!DOCTYPE html><html><head>    <title>Realtime Crypto Market Data Example</title></head><body>    <script>        const socket = new WebSocket('wss://ws.coinapi.io/v1/');        socket.onopen = function (event) {            socket.send(JSON.stringify({                "type": "hello",                "apikey": "YOUR_API_KEY",                "subscribe_data_type": ["trade"],                "subscribe_filter_symbol_id": ["BITSTAMP_SPOT_BTC_USD$", "BITFINEX_SPOT_BTC_LTC$"]            }));        };        socket.onmessage = function (event) {            console.log(event.data);            const contentDiv = document.getElementById('content');            contentDiv.textContent += event.data;        };        socket.onerror = function (error) {            console.log(`WebSocket error: ${error}`);        };    </script>        <div id="content">    </body></html>Java Example​If you're using a Maven project, include Java-WebSocket and JSON dependencies in your pom.xml file:<dependencies>    <dependency>        <groupId>org.java-websocket</groupId>        <artifactId>Java-WebSocket</artifactId>        <version>1.5.1</version>    </dependency>    <dependency>        <groupId>org.json</groupId>        <artifactId>json</artifactId>        <version>20210307</version>    </dependency>    </dependencies>Here's a Java example which uses WebSocketClient and JSONObject classes:import org.java_websocket.client.WebSocketClient;import org.java_websocket.handshake.ServerHandshake;import org.json.JSONArray;import org.json.JSONObject;import java.net.URI;import java.net.URISyntaxException;public class Main {    public static void main(String[] args) {        try {            WebSocketClient socket = new WebSocketClient(new URI("wss://ws.coinapi.io/v1/")) {                                @Override                public void onOpen(ServerHandshake serverHandshake) {                    JSONObject message = new JSONObject();                    message.put("type", "hello");                    message.put("apikey", "YOUR_API_KEY");                    JSONArray subscribeDataType = new JSONArray();                    subscribeDataType.put("trade");                    message.put("subscribe_data_type", subscribeDataType);                    JSONArray subscribeFilterSymbolId = new JSONArray();                    subscribeFilterSymbolId.put("BITSTAMP_SPOT_BTC_USD$");                    subscribeFilterSymbolId.put("BITFINEX_SPOT_BTC_LTC$");                    message.put("subscribe_filter_symbol_id", subscribeFilterSymbolId);                    this.send(message.toString());                }                @Override                public void onMessage(String message) {                    System.out.println(message);                }                @Override                public void onClose(int code, String reason, boolean remote) {                    System.out.println("WebSocket closed");                }                @Override                public void onError(Exception ex) {                    System.out.println("WebSocket error: " + ex.getMessage());                }            };            socket.connect();        } catch (URISyntaxException e) {            e.printStackTrace();        }    }}This Java program:Opens WebSocket connectionSubscribes to real time data for BTC/USD trading on Bitstamp and Bitfinex (you may replace with your desired cryptocurrency pair)Prints incoming real-time messagesBest Practices​Handle connection issues: internet connections aren't always stable. Implement reconnection logic for robustness.Handle rate limiting: even for WebSocket connections, CoinAPI has rate limits. Keep track of your message rate.Secure your API Key: do not hardcode your API key. Make sure it is kept secure, consider using environment variables or secure config files which are not committed to your version control system.Note: If subscribe_filter_symbol_id is ended with $ character then exact match is used instead of prefix match.You can check out more message examples and hello message parameters.Troubleshooting​If you're having issues, double-check the following:The API key is correct and has the required permissions.The WebSocket endpoint URL is correctly formatted.The subscription message contains a valid symbol_id.You have the correct libraries or dependencies installed, and you're using a supported version of the language.Stay tuned for more tutorials on advanced uses of CoinAPI!Was this section helpful?12345PreviousReal-time data visualization with javascriptNextRetrieve and analyze crypto order book data using a cryptocurrency APIIntroductionUnderstanding WebSocket ProtocolPython ExampleJavaScript ExampleJavaScript in web browserJava ExampleBest PracticesTroubleshootingCopyright © 2024 COINAPI LTD or its affiliates. All rights reserved.




(https://docs.coinapi.io/how-to-guides/real-time-trades-stream-using-websocket-with-different-languages)